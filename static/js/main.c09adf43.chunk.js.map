{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","linkToAdd","setLinkToAdd","dialogIsOpen","setDialogIsOpen","openLink","setOpenLink","links","setLinks","processedLinks","setProcessedLinks","collapseIsOpen","setCollapseIsOpen","processLink","link","i","length","slice","console","error","id","className","Classes","DARK","style","marginTop","onSubmit","e","preventDefault","fill","autoFocus","type","placeholder","value","onChange","target","intent","Intent","PRIMARY","marginBottom","icon","title","description","minimal","vertical","alignText","map","idx","href","rel","onClick","handleOpenLink","TEXT_MUTED","isOpen","LIST","usePortal","isCloseButtonShown","DIALOG_BODY","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c09adf43.chunk.js","sourcesContent":["import { AnchorButton, Button, ButtonGroup, Classes, Collapse, ControlGroup, Dialog, FormGroup, H2, InputGroup, Intent, NonIdealState } from '@blueprintjs/core';\nimport React, { useState } from 'react';\nimport \"./App.css\";\n\nconst App = () => {\n  const [linkToAdd, setLinkToAdd] = useState<string>(\"\");\n  const [dialogIsOpen, setDialogIsOpen] = useState<boolean>(false);\n  const [openLink, setOpenLink] = useState<string>(\"\");\n  const [links, setLinks] = useState<string[]>([]);\n  const [processedLinks, setProcessedLinks] = useState<string[]>([]);\n  const [collapseIsOpen, setCollapseIsOpen] = useState(false);\n\n  const addLinkToQueue = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setLinks([...links, linkToAdd]);\n    setLinkToAdd(\"\");\n  };\n\n  const handleOpenLink = (link: string) => {\n    setOpenLink(link);\n    setDialogIsOpen(true);\n  }\n\n  const keepLinkInQueue = () => {\n    setDialogIsOpen(false);\n    setOpenLink(\"\");\n  };\n\n  const removeLinkFromQueue = () => {\n    processLink(openLink);\n    setDialogIsOpen(false);\n    setOpenLink(\"\");\n  }\n\n  const processLink = (link: string) => {\n    for (let i = 0; i < links.length; i++) {\n      if (links[i] === link) {\n        setLinks([...links.slice(0, i), ...links.slice(i + 1)]);\n        setProcessedLinks([...processedLinks, link]);\n        return;\n      }\n    }\n\n    console.error(\"Couldn't find link to process\");\n  };\n\n  return <div id=\"app-container\" className={Classes.DARK}>\n    <H2>Workload</H2>\n\n    <div style={{ marginTop: \"5px\" }}>\n      <form onSubmit={addLinkToQueue}>\n        <FormGroup>\n          <ControlGroup>\n            <InputGroup fill autoFocus type=\"text\" placeholder=\"Link\" value={linkToAdd} onChange={(e) => setLinkToAdd(e.target.value)} />\n            <Button type=\"submit\" intent={Intent.PRIMARY}>Add to Queue</Button>\n          </ControlGroup>\n        </FormGroup>\n      </form>\n    </div>\n\n    <div style={{ marginBottom: \"20px\" }}>\n      {links.length === 0 ? <NonIdealState icon=\"inbox\" title=\"Empty Queue\" description=\"Add links you want to visit later\" /> : <ButtonGroup minimal fill vertical alignText=\"left\">\n        {links.map((link, idx) => <AnchorButton key={idx} href={link} icon=\"share\" target=\"_blank\" rel=\"noreferrer noopener\" onClick={() => handleOpenLink(link)}>{link}</AnchorButton>)}\n      </ButtonGroup>}\n    </div>\n\n    {processedLinks.length > 0 && <div className={Classes.TEXT_MUTED}>\n      <Button minimal fill alignText=\"left\" icon={collapseIsOpen ? \"chevron-down\" : \"chevron-right\"} onClick={() => setCollapseIsOpen(!collapseIsOpen)}>Processed</Button>\n      <Collapse isOpen={collapseIsOpen}>\n        <ul className={Classes.LIST}>\n          {processedLinks.map((link, idx) => <li key={idx}>{link}</li>)}\n        </ul>\n      </Collapse>\n    </div>}\n\n    <Dialog title=\"Process Link\" isOpen={dialogIsOpen} usePortal={false} isCloseButtonShown={false}>\n      <div className={Classes.DIALOG_BODY}>\n        <p>\n          Are you done with <a href={openLink} target=\"_blank\" rel=\"noreferrer noopener\">{openLink}</a>?\n        </p>\n      </div>\n\n      <div className={Classes.DIALOG_FOOTER}>\n        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n          <Button onClick={keepLinkInQueue}>No, keep in queue</Button>\n          <Button onClick={removeLinkFromQueue} intent={Intent.PRIMARY}>Yes, mark as processed</Button>\n        </div>\n      </div>\n    </Dialog>\n  </div >\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}