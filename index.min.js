class ElementBase{constructor(e){this.element=document.createElement(e),this.children=[]}addChild(e){this.children.push(e),this.element.appendChild(e.element)}removeChild(e){for(let t=0;t<this.children.length;t++)this.children[t]===e&&this.children.splice(t,1)}addClass(e){this.element.classList.add(e)}removeClass(e){this.element.classList.remove(e)}destroy(){for(let e of this.children)e.destroy();this.removeEventListeners&&this.removeEventListeners(),this.children.length=0,this.element.remove(),this.element=null}}class Button extends ElementBase{constructor(e,t){super("button"),this.element.innerText=e,this.eventHandler=t,this.element.addEventListener("click",this.eventHandler)}removeEventListeners(){this.element.removeEventListener("click",this.eventHandler)}}class Task extends ElementBase{constructor(e){super("label"),this.element.innerText=e.title,this.element.htmlFor=`checkbox-${e.id}`}updateTask(e){this.element.innerText=e}}class TextInput extends ElementBase{constructor(e,t,s=""){super("input"),this.element.type="text",this.element.value=e,this.eventHandler=t,this.element.placeholder=s,this.element.addEventListener("keyup",this.eventHandler)}removeEventListeners(){this.element.removeEventListener("keyup",this.eventHandler)}}class Checkbox extends ElementBase{constructor(e,t){super("input"),this.element.id=e,this.element.type="checkbox",this.eventHandler=t,this.element.addEventListener("change",this.eventHandler)}setChecked(e){this.element.checked=e}removeEventListener(){this.element.removeEventListener("change",this.eventHandler)}}class TaskRootContainer extends ElementBase{constructor(e){super("div"),this.task=e,this.element.className="task-root-container",this.handleInitiateAdd=this.handleInitiateAdd.bind(this),this.handleCancelAdd=this.handleCancelAdd.bind(this),this.handleAdd=this.handleAdd.bind(this),this.handleDelete=this.handleDelete.bind(this),this.handleCheckToggle=this.handleCheckToggle.bind(this),this.checkbox=new Checkbox(`checkbox-${this.task.id}`,this.handleCheckToggle),this.addChild(this.checkbox),this.addChild(new TaskContainer(e)),this.addButton=new Button("+",this.handleInitiateAdd),this.addChild(this.addButton),this.addChild(new Button("âˆ’",this.handleDelete)),this.subTasks=[];for(let t of e.subTasks){const e=new TaskRootContainer(t);this.addChild(e),this.subTasks.push(e)}this.toggleComplete(this.task.complete)}handleCheckToggle(e){const t=e.target.checked;taskService.toggleComplete(this.task.id,t),this.toggleComplete(t)}toggleComplete(e){e?this.addClass("complete"):this.removeClass("complete"),this.checkbox.setChecked(e);for(let t of this.subTasks)t.toggleComplete(e)}handleDelete(){taskService.deleteTask(this.task.id),this.subTasks.length=0,this.destroy()}handleInitiateAdd(){this.addButton.addClass("hidden"),this.addInput=new TextInput("",this.handleAdd,"New subtask"),this.addInput.addClass("add-input"),this.addChild(this.addInput),this.cancelAdd=new Button("Cancel",this.handleCancelAdd),this.addChild(this.cancelAdd)}handleAdd(e){if(13!==e.keyCode)return;const t=e.target.value,s=taskService.addSubTask(this.task.id,t);if(s){const e=new TaskRootContainer(s);this.addChild(e),this.subTasks.push(e)}else alert("Something went wrong!");this.destroyAddComponents(),this.addButton.removeClass("hidden")}handleCancelAdd(){this.destroyAddComponents(),this.addButton.removeClass("hidden")}destroyAddComponents(){this.removeChild(this.addInput),this.addInput.destroy(),this.addInput=null,this.removeChild(this.cancelAdd),this.cancelAdd.destroy(),this.cancelAdd=null}}class TaskContainer extends ElementBase{constructor(e){super("div"),this.addClass("task-container"),this.task=e,this.taskElement=new Task(e),this.handleInitiateEdit=this.handleInitiateEdit.bind(this),this.handleCancelEdit=this.handleCancelEdit.bind(this),this.addChild(this.taskElement),this.handleEdit=this.handleEdit.bind(this),this.editButton=new Button("Edit",this.handleInitiateEdit),this.addChild(this.editButton)}handleInitiateEdit(){this.taskElement.updateTask(""),this.editButton.addClass("hidden"),this.editInput=new TextInput(this.task.title,this.handleEdit),this.addChild(this.editInput),this.cancelEdit=new Button("Cancel",this.handleCancelEdit),this.addChild(this.cancelEdit)}handleCancelEdit(){this.taskElement.updateTask(this.task.title),this.destroyEditComponents(),this.editButton.removeClass("hidden")}handleEdit(e){13===e.keyCode&&(this.task.title=e.target.value,this.taskElement.updateTask(this.task.title),this.destroyEditComponents(),this.editButton.removeClass("hidden"))}destroyEditComponents(){this.removeChild(this.editInput),this.editInput.destroy(),this.editInput=null,this.removeChild(this.cancelEdit),this.cancelEdit.destroy(),this.cancelEdit=null}}class TaskService{constructor(){this.tasks=JSON.parse(localStorage.getItem("workload-tasks"))||[]}deleteTask(e){const t=function(e,s){let i=null;for(let n=0;n<e.length;n++){if(e[n].id===s){i=e.splice(n,1);break}if(e[n].subTasks.length>0&&(i=t(e[n].subTasks,s)))break}return i};t(this.tasks,e),this.persistTasks()}persistTasks(){localStorage.setItem("workload-tasks",JSON.stringify(this.tasks))}incrementId(){let e=parseInt(localStorage.getItem("workload-task-id"));return NaN!==e?e++:e=0,localStorage.setItem("workload-task-id",e),e}createTask(e){return{id:this.incrementId(),title:e,complete:!1,subTasks:[]}}addTask(e){const t=this.createTask(e);return this.tasks.push(t),this.persistTasks(),t}toggleComplete(e,t){const s=function(e,t){let i=null;for(let n=0;n<e.length;n++){if(e[n].id===t){i=e[n];break}if(e[n].subTasks.length>0&&(i=s(e[n].subTasks,t)))break}return i},i=s(this.tasks,e);i&&(TaskService.toggleAllComplete(i,t),this.persistTasks())}static toggleAllComplete(e,t){e.complete=t;for(let s of e.subTasks)TaskService.toggleAllComplete(s,t)}addSubTask(e,t){const s=this.createTask(t),i=function(e,t){let s=null;for(let n=0;n<e.length;n++){if(e[n].id===t){s=e[n];break}if(e[n].subTasks.length>0&&(s=i(e[n].subTasks,t)))break}return s},n=i(this.tasks,e);return n?(n.subTasks.push(s),this.persistTasks(),s):null}}function handleTaskAdd(e){if(13!==e.keyCode)return;const t=taskService.addTask(e.target.value),s=new TaskRootContainer(t);tasksContainer.appendChild(s.element),e.target.value=""}const taskService=new TaskService,tasksContainer=document.getElementById("tasks-container");document.getElementById("task-input").addEventListener("keyup",handleTaskAdd);for(let e of taskService.tasks){const t=new TaskRootContainer(e);tasksContainer.appendChild(t.element)}